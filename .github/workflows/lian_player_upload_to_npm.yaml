name: Upload packages to NPM
run-name: Upload packages to NPM

on:
  workflow_call:
    secrets:
      PLAYER_NPM_TOKEN:
        required: true
      PLAYER_GITHUB_BOT_TOKEN:
        required: true
    inputs:
      yarn-upgrade-list:
        description: "list of packages to overwrite in package.json - example: 'playkit-js/playkit-js@canary @playkit-js/playkit-js-dash@canary'"
        required: false
        type: string
      env:
        description: "env - example: 'qa/prod'"
        required: false
        type: string
      enabled-openssl-legacy-provider:
        description: "enable the NODE_OPTIONS --openssl-legacy-provider - example: 'ture/false'"
        required: false
        type: string
        default: 'true'
      node-version:
        description: "which node version to use - example: '17.x/18.x'"
        required: false
        type: string
        default: '17.x'
      stage:
        description: "build for specific type - example: 'canary/patch/beta/latest'"
        required: false
        type: string
      os:
        description: "which ubuntu version to use - example: 'ubuntu-latest'"
        required: false
        type: string
        default: 'ubuntu-latest'
    outputs:
      name:
        description: "name"
        value: ${{ jobs.upload-to-npm.outputs.name }}
      version:
        description: "version"
        value: ${{ jobs.upload-to-npm.outputs.version }}
      full-npm-name:
        description: "full-npm-name"
        value: ${{ jobs.upload-to-npm.outputs.full-npm-name }}

jobs:
  upload-to-npm:
    runs-on: ${{ inputs.os }}
    outputs:
      name: ${{ steps.name.outputs.name }}
      version: ${{ steps.version.outputs.version }}
      full-npm-name: ${{ steps.full_npm_name.outputs.full_npm_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PLAYER_GITHUB_BOT_TOKEN }}
      - name: Node.js version ${{ inputs.node-version }}
        uses: Wandalen/wretry.action@v1.0.36
        with:
          action: actions/setup-node@v3
          with: |
            node-version: ${{ inputs.node-version }}
            always-auth: true
            token: ${{ secrets.PLAYER_NPM_TOKEN }}
          attempt_limit: 3
          attempt_delay: 2000

      - name: Setup Git
        run: |
          git config --global user.email "ovp.cp@kaltura.com"
          git config --global user.name "ovp-github-actions"

      - name: Yarn upgrade ${{ inputs.yarn-upgrade-list }}
        if: ${{ inputs.yarn-upgrade-list }}
        run: |
          if [ "${{ inputs.env }}" = "prod" ]; then
            my_dir=$(pwd)
            for package in ${{ inputs.yarn-upgrade-list }}; do
              # get old version
              old_version=$(yarn list | grep "${package}@" | awk -F '@' '{print $3}')

              # yarn upgrade package
              yarn upgrade $package

              # get new version
              new_version=$(yarn list | grep "${package}@" | awk -F '@' '{print $3}')

              # commit for version was changed
              if [ "${old_version}" != "${new_version}" ]; then
                # git clone
                repo=$(echo "${package}"| sed -e 's/@playkit-js\///g')
                git clone https://${{ secrets.PLAYER_GITHUB_BOT_TOKEN }}@github.com/kaltura/${repo}.git ../${repo} > /dev/null 2>&1
                cd ../${repo}

                # find if package has changed
                package_version=$(echo $(node -p "require('./package.json').version;"))
                package_version_commit=$(git log --oneline | fgrep "${package_version}" | awk '{print $1}')
                package_modified_feat=$(git log --oneline $prev_version_commit..HEAD | egrep '(feat)\((FEC|FEV|SUP|PSVAMB)-[0-9]+\):')
                package_modified_fix=$(git log --oneline $prev_version_commit..HEAD | egrep '(fix)\((FEC|FEV|SUP|PSVAMB)-[0-9]+\):')

                cd ${my_dir}

                if [[ -z "${package_modified_feat}" ]]; then
                  git commit -m "feat: update ${repo} to [${new_version}](https://github.com/kaltura/${repo}/releases/tag/v${new_version})"
                elif [[ -z "${package_modified_fix}" ]]; then
                  git commit -m "fix: update ${repo} to [${new_version}](https://github.com/kaltura/${repo}/releases/tag/v${new_version})"
                fi
              fi
            done
          else
            for package in ${{ inputs.yarn-upgrade-list }}; do
              yarn add $package --exact
            done
          fi

      - name: Yarn install
        run: yarn install

      - name: Yarn run release with NODE_OPTIONS
        if: ${{ inputs.enabled-openssl-legacy-provider == 'true' }}
        run: |
          if [ "${{ inputs.env }}" = "prod" ]; then
            yarn run release
          elif [ "${{ inputs.stage }}" = "patch" ]; then
            yarn run release --prerelease patch --skip.commit=true --skip.tag=true
          else
            yarn run release --prerelease canary --skip.commit=true --skip.tag=true
          fi
        env:
          NODE_OPTIONS: "--openssl-legacy-provider"

      - name: Yarn run release without NODE_OPTIONS
        if: ${{ inputs.enabled-openssl-legacy-provider != 'true' }}
        run: |
          if [ "${{ inputs.env }}" = "prod" ]; then
            yarn run release
          elif [ "${{ inputs.stage }}" = "patch" ]; then
            yarn run release --prerelease patch --skip.commit=true --skip.tag=true
          else
            yarn run release --prerelease canary --skip.commit=true --skip.tag=true
          fi

      - name: Update version in package.json file
        run: |
          sha=$(echo "${GITHUB_SHA::7}")
          currentVersion=$(npx -c 'echo "$npm_package_version"')
          commitNumberAfterTag=$(git rev-list  `git rev-list --tags --no-walk --max-count=1`..HEAD --count)
          stage=${{ inputs.stage }}
          newVersion=$(echo ${currentVersion} | sed -e "s/${stage}\.[[:digit:]]/${stage}.${commitNumberAfterTag}-${sha}/g")
          echo "New version ${newVersion}"
          sed -iE "s/${currentVersion}/${newVersion}/g" package.json
          sed -iE "s/${currentVersion}/${newVersion}/g" CHANGELOG.md
          rm package.jsonE
          rm CHANGELOG.mdE

      - name: Yarn run build with NODE_OPTIONS
        if: ${{ inputs.enabled-openssl-legacy-provider == 'true' }}
        run: |
          yarn run build
          ls -la dist/
        env:
          NODE_OPTIONS: "--openssl-legacy-provider"

      - name: Yarn run build without NODE_OPTIONS
        if: ${{ inputs.enabled-openssl-legacy-provider != 'true' }}
        run: |
          yarn run build
          ls -la dist/

      - name: Npm publish
        run: |
          npm set registry "https://registry.npmjs.org"
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > .npmrc
          if [ "${{ inputs.env }}" = "prod" ]; then
            npm publish .
          elif [ "${{ inputs.stage }}" = "patch" ]; then
            npm publish . --tag patch
          else
            npm publish . --tag canary
          fi
          rm -rf .npmrc
        env:
          NPM_AUTH_TOKEN: ${{ secrets.PLAYER_NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.PLAYER_NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PLAYER_NPM_TOKEN }}

      - name: Yarn run pushTaggedRelease and create github release
        if: ${{ inputs.env == 'prod' }}
        run: |
          yarn run pushTaggedRelease
          npx conventional-github-releaser -p angular -t ${{ secrets.PLAYER_GITHUB_BOT_TOKEN }} || true

      - name: Output name
        id: name
        run: |
          packageName=$(npx -c 'echo "$npm_package_name"')
          shortName=$(echo "${packageName}"| sed -e 's/@playkit-js\///g' -e 's/playkit-js-//g')
          if [ "${shortName}" = "playkit-js" ]; then
            name="playkit"
          else
            name="playkit-${shortName}"
          fi
          echo $name
          echo "name=${name}" >> $GITHUB_OUTPUT

      - name: Output version
        id: version
        run: |
          version=$(npx -c 'echo "$npm_package_version"')
          echo $version
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Output full package name and version
        id: full_npm_name
        run: |
          packageName=$(npx -c 'echo "$npm_package_name"')
          currentVersion=$(npx -c 'echo "$npm_package_version"')
          full_npm_name="${packageName}@${currentVersion}"
          echo $full_npm_name
          echo "full_npm_name=${full_npm_name}" >> $GITHUB_OUTPUT