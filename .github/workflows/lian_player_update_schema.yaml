name: Update schema
run-name: Update schema

on:
  workflow_call:
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID:
        required: true
      PLAYER_SERVICES_ACCOUNT_ID:
        required: true
      PLAYER_S3_BUCKET_DEPLOYMENT:
        required: true
    inputs:
      env:
        description: "env - example: 'qa/prod'"
        required: false
        type: string
      type:
        description: "choose player or plugin or dependency - example: 'plugin'"
        required: true
        type: string
      schema-type:
        description: "schema-type - example: 'playerV3Versions/playerV3OvpVersions'"
        required: true
        type: string
      name:
        description: "name - example: 'playkit-youbora'"
        required: true
        type: string
      version:
        description: "version - example: '2.3.5-canary.5-39e87cf'"
        required: true
        type: string
      player-type:
        description: "player type - example 'ovp tv'"
        required: false
        type: string


env:
  PLAYERS: "ovp tv"

jobs:
  update-schema:
    runs-on: [ ubuntu-latest ]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}:role/central-oidc-github-actions
          role-session-name: githubAction
          aws-region: "eu-central-1"

      - name: Update schema s3 deployment
        run: |
          # Assume role
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
                      $(aws sts assume-role \
                      --role-arn arn:aws:iam::${{ secrets.PLAYER_SERVICES_ACCOUNT_ID }}:role/nvp1-deployment-role \
                      --role-session-name "nvp1-${{ github.run_id }}" \
                      --region "us-east-1" \
                      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
                      --output text))

          if [ "${{ inputs.env }}" = "prod" ]; then
            jsonName="player-qa-${{ inputs.schema-type }}.json"
          else
            jsonName="player-canary-${{ inputs.schema-type }}.json"
          fi

          s3Path="s3://nvp1-${{ secrets.PLAYER_S3_BUCKET_DEPLOYMENT }}/player/schema"
          tmp=$(mktemp)
          aws s3 cp ${s3Path}/${jsonName} .

          echo "${jsonName} before the changes:"
          cat ${jsonName}

          if [ "${{ inputs.type }}" = "plugin" ]; then
            jq '."'"${{ inputs.name }}"'" = "'"${{ inputs.version }}"'"' ${jsonName} > "$tmp" && mv "$tmp" ${jsonName}
          elif [ "${{ inputs.type }}" = "player" ]; then
            for player in ${{ inputs.player-type }}; do
              jq '."'"kaltura-${player}-player"'" = "'"${{ inputs.version }}"'"' ${jsonName} > "$tmp" && mv "$tmp" ${jsonName}
            done
          else
            echo "wrong type..."
            exit 1
          fi

          echo "${jsonName} after the changes:"
          cat ${jsonName}

          aws s3 cp ${jsonName} ${s3Path}/